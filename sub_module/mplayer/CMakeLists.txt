
PROJECT(mplayer)

#append_default_search_paths(CMAKE_PREFIX_PATH, ON)

#
# 针对FFmpeg通用配置,定位包.
FIND_PACKAGE(FFmpeg REQUIRED
	COMPONENTS avcodec avfilter avdevice avutil swscale avformat swresample postproc)
INCLUDE_DIRECTORIES(${FFmpeg_INCLUDE_DIR})

#
# 针对SDL2  通用配置,定位包.
FIND_PACKAGE(SDL2  REQUIRED)
INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIR})

#
# 针对libVLC通用配置,定位包.
#FIND_PACKAGE(LIBVLC  REQUIRED)
#INCLUDE_DIRECTORIES(${LIBVLC_INCLUDE_DIR})
# 针对Qt5工程通用配置,定位包.
# Find include files in the source and build directories.
SET(CMAKE_INCLUDE_CURRENT_DIR 	ON)
# Turn on automatic invocation of the moc files.
SET(CMAKE_AUTOMOC 				ON)
# Find the packages(libraries/headers dirs) of Qt5.
FIND_PACKAGE(Qt5 ${FIND_MODE}
	COMPONENTS Widgets Core Gui Network Xml OpenGL 
	LinguistTools WebChannel WebEngineWidgets )
#FIND_PACKAGE(Qt5Widgets 			${FIND_MODE})
IF(WIN32)
FIND_PACKAGE(Qt5AxContainer 		${FIND_MODE})
FIND_PACKAGE(Qt5AxBase 				${FIND_MODE})
ENDIF()
IF(		NOT Qt5Widgets_DIR
	OR 	NOT Qt5LinguistTools_FOUND )
	IF (ENABLE_UI)
		MESSAGE(FATAL_ERROR "Failed to find Qt5![please cheCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}]")
	ELSE()
		MESSAGE(STATUS "Qt5 not found - UI disabled")
	ENDIF()
ENDIF()

IF( MSVC )
	IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
		STRING(REGEX REPLACE   "/W[0-4]" "/W3" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	ELSE()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3")
	ENDIF()
	# Disable pointless constant condition warnings
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4127 /wd4201 /wd4819 /Zi")
		SET(CMAKE_EXE_LINKER_FLAGS    "/SAFESEH:NO")
	SET(CMAKE_SHARED_LINKER_FLAGS "/SAFESEH:NO")
	SET(CMAKE_STATIC_LINKER_FLAGS "/SAFESEH:NO")
	SET(CMAKE_MODULE_LINKER_FLAGS "/SAFESEH:NO")
	ADD_DEFINITIONS(-DUNICODE -D_UNICODE -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS)
ENDIF()

SET(MEDIACORE_HEADERS
	mplayer.hpp
	demuxer.hpp
	decoder.hpp
	synchro.hpp
	mrender.hpp
	pubcore.hpp)
SET(MEDIACORE_SOURCES 
	mplayer.cpp
	mplayer.cpp
	demuxer.cpp
	decoder.cpp
	synchro.cpp
	mrender.cpp)
SOURCE_GROUP(${PROJECT_NAME}		 FILES			${MEDIACORE_SOURCES} ${MEDIACORE_HEADERS})
LIST(APPEND ALL_SOURCES_AND_HEADERS  				${MEDIACORE_SOURCES} ${MEDIACORE_HEADERS})

IF(CMAKE_LIBRARY_TEST)
	ADD_EXECUTABLE(${PROJECT_NAME}  	${ALL_SOURCES_AND_HEADERS})
	ADD_DEFINITIONS(-DUNIT_TEST)
ELSE()
	ADD_LIBRARY(${PROJECT_NAME}  MODULE ${ALL_SOURCES_AND_HEADERS})
	#ADD_LIBRARY(${PROJECT_NAME}  STATIC ${ALL_SOURCES_AND_HEADERS})
ENDIF()
TARGET_LINK_LIBRARIES(${PROJECT_NAME} 
	Qt5::Widgets 
	Qt5::WinMain)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${FFmpeg_LIBRARY} ${SDL2_LIBRARY})
	
IF(${CMAKE_BUILD_TYPE} MATCHES "Debug")
	SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "mplayerd")
ENDIF()	
	